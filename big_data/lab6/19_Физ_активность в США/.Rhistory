a = 1
iris_C <- iris[,-5]
labels_iris <- iris[,5]  #  Этот столбец позже используем для подписей на дендро-грамме
View(iris_C)
iris_C
labels_iris
iris_C
maxs <- apply(iris_C, 2, max)
mins <- apply(iris_C, 2, min)
iris_C <- scale(iris_C, center = mins, scale = maxs - mins)
dist.iris <- dist(iris_C)
dist.iris
clust.iris <- hclust(dist.iris, "ward.D")
clust.iris
plot(clust.iris)
plot(clust.iris, labels_iris, cex=0.5)
rect.hclust(clust.iris, k=4, border="red")
hcd <- as.dendrogram(clust.iris)
hcd
# далее будут графики подряд, в 3 строки, 1 столбец
par(mfrow = c(3, 1))
# верхняя часть при обрезке
plot(cut(hcd, h = 4)$upper, main = "Верхняя часть дендрограммы")
# первая ветка нижней части (Branch 1)
plot(cut(hcd, h = 4)$lower[[1]], main = "Branch 1")
# третья ветка нижней части (Branch 3)
plot(cut(hcd, h = 4)$lower[[3]],  main = "Branch 3")
dev.off()
# верхняя часть при обрезке
plot(cut(hcd, h = 4)$upper, main = "Верхняя часть дендрограммы")
# первая ветка нижней части (Branch 1)
plot(cut(hcd, h = 4)$lower[[1]], main = "Branch 1")
# третья ветка нижней части (Branch 3)
plot(cut(hcd, h = 4)$lower[[3]],  main = "Branch 3")
dev.off()
#  Вектор groups содержит номер кластера, в который попал классифицируемый объект
groups <- cutree(clust.iris, k=3)
groups
#  в 1-ом кластере
g1<-colMeans(iris[groups==1, 1:4])
#  во 2-ом кластере
g2<-colMeans(iris[groups==2, 1:4])
#  в 3-ем кластере
g3<-colMeans(iris[groups==3, 1:4])
g3
df<-data.frame(g1,g2,g3)
df1<-t(df)
df<-t(df1)
barplot(df, col=c("red","green","blue","yellow")) #  построим график
groups
colMeans(iris[groups==1, 1:4])
library (lattice)
my_data <- iris
head(my_data)
my_data
head(my_data)
xyplot(Sepal.Length ~ Petal.Length, data = my_data)
xyplot(Sepal.Length ~ Petal.Length, group = Species, data = my_data, auto.key = TRUE)
xyplot(Sepal.Length ~ Petal.Length, group = Species, data = my_data)
Species
boxplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal.Length",
+         frame = FALSE, col = "lightgray")
boxplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal.Length", frame = FALSE, col = "lightgray")
boxplot(Sepal.Length ~ Species, data = iris, ylab = "Sepal.Length",  col = "lightgray")
Sepal.Length
boxplot(Sepal ~ Species, data = iris, ylab = "Sepal.Length",  col = "lightgray")
xyplot(Sepal.Length~Petal.Length+Petal.Width|Species,data=iris, grid = T, auto.key=TRUE)
xyplot(
Sepal.Length ~ Petal.Length | Species,
layout = c(3, 1),               # panel with ncol = 3 and nrow = 1
group = Species, data = iris,
type = c("p", "smooth"),        # Show points and smoothed line
scales = "free"                 # Make panels axis scales independent
)
cloud(Sepal.Length ~ Sepal.Length * Petal.Width, group = Species, data = iris, auto.key = TRUE)
packages <- c('ggplot2', 'dplyr', 'tidyr', 'tibble')
# install.packages(packages)
library(ggplot2)
library(dplyr)
install.packages(packages)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
iris %>%
ggplot(aes(Petal.Length, Petal.Width, color = Species))+geom_point()
library(broom)
install.packages(broom)
library(broom)
setwd("C:/Users/Tsinana/GitHub/6-th_semester/big_data/lab6/19_Физ_активность в США")
#Выгрузка данных
location_id<-read.csv("BRFSS location_id KEY.csv", sep=";", header=T, fileEncoding="cp1251")
Acticity<-read.csv("BRFSS Physical Acticity.csv", sep=";", header=T, fileEncoding="cp1251")
setwd("C:/Users/Tsinana/GitHub/6-th_semester/big_data/lab6/19_Физ_активность в США")
#Выгрузка данных
location_id<-read.csv("BRFSS location_id KEY.csv", sep=";", header=T, fileEncoding="cp1251")
activity_columns<-read.csv("BRFSS Physical Activity columns KEY.csv", sep=";", header=T, fileEncoding="cp1251")
acticity<-read.csv("BRFSS Physical Acticity.csv", sep=";", header=T, fileEncoding="cp1251")
location_id
View(acticity)
View(activity_columns)
View(location_id)
#Выгрузка данных
location_id<-read.csv("BRFSS location_id KEY.csv", sep=",", header=T, fileEncoding="cp1251")
activity_columns<-read.csv("BRFSS Physical Activity columns KEY.csv", sep=",", header=T, fileEncoding="cp1251")
acticity<-read.csv("BRFSS Physical Acticity.csv", sep=",", header=T, fileEncoding="cp1251")
View(acticity)
View(activity_columns)
View(location_id)
View(acticity)
acticity_2020 = acticity[2]==2020
acticity_2020
acticity_2020 = acticity[3]==2020
acticity_2020 = acticity[acticity[3]==2020]
acticity_2020
View(activity_columns)
View(acticity)
View(location_id)
View(acticity)
acticity_2020 <- acticity[acticity[3]==2020]
acticity_2020 <- dataframe(acticity[acticity[3]==2020])
acticity_2020 <- data.frame(acticity[acticity[3]==2020])
View(acticity_2020)
data.frame(acticity[acticity[3]==2020])
acticity_2020 <- data.frame(acticity[acticity[3]==2020,])
View(acticity_2020)
plot(acticity)
plot(acticity[1:50])
acticity_full <- data.frame(acticity[acticity[3]==c(2019,2017,2015),])
acticity_full
acticity_full <- data.frame(acticity[acticity[3]==c(2019,2017,2015),])
View(acticity_full)
acticity_unfull <- data.frame(acticity[acticity[3]==c(2021,2020,2018,2016),])
View(acticity_unfull)
acticity_full <- data.frame(acticity[is.na(acticity[4]),])
acticity_unfull <- data.frame(acticity[!is.na(acticity[4]),])
View(acticity_full)
View(acticity_unfull)
