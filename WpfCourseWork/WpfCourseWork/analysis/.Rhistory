persp(x, y, z, xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade= .4 , theta = 30 , phi = 15 )
x <- -10:10
y <- -10:10
#define function to create z-values
z_values <- function (x, y) {
sqrt(x ^ 2 + y ^ 2)
}
#create z-values
z = outer(x, y, z_values)
#create 3D plot
persp(x, y, z, xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade= .4 , theta = 30 , phi = 15 )
x = linspace(-2,2,20);
y = x;
z = x * exp(-x^2 - y^2);
x = linspace(-2,2,20);
x <- -10:10
y = x;
z = x * exp(-x^2 - y^2);
surf(x,y,z)
x = 0:pi/100:2*pi;
x <- -10:10
y <- -10:10
plot(x,y)
M <- mesh(seq(0, 6*pi, length.out = 50),seq(pi/3, pi, length.out = 50))
surf3D(x, y, z, colvar = z, colkey = TRUE,
box = TRUE, bty = "b", phi = 20, theta = 120)
library(plot3D)
install.packages(plot3D)
install.packages(plot3D)
library(plot3D)
M <- mesh(seq(0, 6*pi, length.out = 50),seq(pi/3, pi, length.out = 50))
u <- M$x ; v <- M$y
x <- v * cos(u)
y <- v * sin(u)
z <- 10 * u
surf3D(x, y, z, colvar = z, colkey = TRUE,
box = TRUE, bty = "b", phi = 20, theta = 120)
install.packages(plotly)
install.packages('plot3D')
install.packages('plotly')
M <- mesh(seq(0, 6*pi, length.out = 50),seq(pi/3, pi, length.out = 50))
u <- M$x ; v <- M$y
install.packages('graphics')
library(graphics)
M <- mesh(seq(0, 6*pi, length.out = 50),seq(pi/3, pi, length.out = 50))
u <- M$x ; v <- M$y
x <- v * cos(u)
y <- v * sin(u)
z <- 10 * u
surf3D(x, y, z, colvar = z, colkey = TRUE,
box = TRUE, bty = "b", phi = 20, theta = 120)
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
fig <- plot_ly(x = kd$x, y = kd$y, z = kd$z) %>% add_surface()
fig
install.packages("magrittr")
library(magrittr)
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
fig <- plot_ly(x = kd$x, y = kd$y, z = kd$z) %>% add_surface()
fig <- plot_ly(x = kd$x, y = kd$y, z = kd$z)
install.packages('plotly')
library(plotly)
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
fig <- plot_ly(x = kd$x, y = kd$y, z = kd$z)
fig
x <- -10:10
y <- -10:10
#define function to create z-values
z_values <- function (x, y) {
sqrt(x ^ 2 + y ^ 2)
}
fig <- plot_ly(x = kd$x, y = kd$y, z = kd$z)
fig
#create z-values
z = outer(x, y, z_values)
fig <- plot_ly(x = kd$x, y = kd$y, z = kd$z)
fig
z <- -10:10
fig <- plot_ly(x = x, y = y, z = z)
fig
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
#create 3D plot
persp(x, y, z, xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade= .4 , theta = 30 , phi = 15 )
x <- -10:10
y <- -10:10
z <- -10:10
#create 3D plot
persp(x, y, z, xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade= .4 , theta = 30 , phi = 15 )
#create z-values
z = outer(x, y, z_values)
#create 3D plot
persp(x, y, z, xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade= .4 , theta = 30 , phi = 15 )
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
xE <- c(-10,10); xy <- expand.grid(xE, xE)
points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
lines(trans3d(xr,yr, f(xr,yr), res), col = "pink", lwd = 2)
xE <- c(-10,10); xy <- expand.grid(xE, xE)
points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
lines(trans3d(xr,yr, f(xr,yr), res), col = "pink", lwd = 2)
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
xE <- c(-10,10); xy <- expand.grid(xE, xE)
points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
lines(trans3d(xr,yr, f(xr,yr), res), col = "pink", lwd = 2)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
## Don't draw the grid lines :  border = NA
par(bg = "slategray")
persp(x, y, z, theta = 135, phi = 30, col = "green3", scale = FALSE,
ltheta = -120, shade = 0.75, border = NA, box = FALSE)
par(bg = "white")
x <- seq(-1.95, 1.95, length = 30)
y <- seq(-1.95, 1.95, length = 35)
z <- outer(x, y, function(a, b) a*b^2)
nrz <- nrow(z)
ncz <- ncol(z)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c("blue", "green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
persp(x, y, z, col = color[facetcol], phi = 30, theta = -30)
par(op)
fig <- plot_ly(x = x, y = y, z = z)
fig
fig <- plot_ly(x = x, y = y, z = z)
fig
z <- matrix(rnorm(100), nrow = 10)
plot_ly(z = z, type = "surface")
plot_ly(z = z)
plot_ly(z = z, type = "surface")
View(z)
a =   rnorm(100)
a =   rnorm(100)
data <- data.frame(
data <- data.frame(
emp_name = seq(0, 1, by = 0.1),
a =   rnorm(100)
plot_ly(z = z, type = "surface")
data <- data.frame(emp_id = seq(100, 1000, 100), emp_name = seq(0, 1, by = 0.1),salary = c(0.52930314, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
data <- data.frame(emp_id = seq(100, 900, 100), emp_name = seq(0, 1, by = 0.1),salary = c(0.52930314, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
data <- data.frame(emp_id = seq(100, 1100, 100), emp_name = seq(0, 1, by = 0.1),salary = c(0.52930314, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
data <- data.frame(emp_id = seq(100, 1000, 100), emp_name = seq(0, 1, by = 0.1),salary = c(0.52930314,1, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
a =   rnorm(100)
data <- data.frame(emp_id = seq(100, 1000, 100), emp_name = seq(0, 0.9, by = 0.1),salary = c(0.52930314,, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
data <- data.frame(emp_id = seq(100, 1000, 100), emp_name = seq(0, 0.9, by = 0.1),salary = c(0.52930314, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
View(data)
plot_ly(z = data, type = "surface")
data <- data.frame(emp_id = seq(100, 1000, 100), emp_name = seq(0, 0.9, by = 0.1),salary = c(0.52930314, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
plot_ly(z = data, type = "surface")
plot_ly(data, type = "surface")
plot_ly(x = data$x, y = data$y,z = data$z, type = "surface")
data <- data.frame(x = seq(100, 1000, 100), y = seq(0, 0.9, by = 0.1),z = c(0.52930314, 0.84045687, 0.20658773, 0.97635211, 0.46375113, 0.86202321, 0.70895114, 0.15049526, 0.28499847, 0.5925479))
plot_ly(x = data$x, y = data$y,z = data$z, type = "surface")
View(data)
fig = plot_ly(x = data$x, y = data$y,z = data$z, type = "surface")
fig
plot_ly(data, type = "surface")
volcano
a = volcano
View(a)
plot_ly(volcano, type = "surface")
plot_ly(volcano, type = "surface")
plot_ly(volcano, type = "surface")
plot_ly(z = ~volcano, type = "surface")
plot_ly(z = ~data, type = "surface")
plot_ly(z = data, type = "surface")
plot_ly(x = ~data$x, y = ~data$y,z = ~data$z, type = "surface")
plot_ly(x = ~data$x, y = ~data$y,z = ~data$z, type = "surface")
data <- data.frame(x = seq(100, 1000, 100), y = seq(0, 0.9, by = 0.1),
z = seq(0, 0.9, by = 0.1))
plot_ly(x = ~data$x, y = ~data$y,z = ~data$z, type = "surface")
plot_ly(z = data, type = "surface")
plot_ly(x = ~data$x, y = ~data$y,z = ~data$z, type = "surface")
View(data)
plot_ly(x = data$x, y = data$y,z = data$z, type = "surface")
x = seq(100, 1000, 100)
y = seq(0, 0.9, by = 0.1)
z = seq(0, 0.9, by = 0.1)
plot_ly(x = x, y = y,z = z, type = "surface")
plot_ly(x = ~x, y = ~y,z = ~z, type = "surface")
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
z = rbind(
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0))
library(plotly)
fig <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = 1.5, end = 2, size = 0.04, color = 'white'),
z = list(show = TRUE, start = 0.5, end = 0.8, size = 0.05)),
x = ~x,
y = ~y,
z = ~z)
fig <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = 1.5, end = 2, size = 0.04, color = 'white'),
z = list(show = TRUE, start = 0.5, end = 0.8, size = 0.05)),
x = ~x,
y = ~y,
z = ~z)
x = c(1,2,3,4,5)
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
z = rbind(
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0))
library(plotly)
fig <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = 1.5, end = 2, size = 0.04, color = 'white'),
z = list(show = TRUE, start = 0.5, end = 0.8, size = 0.05)),
x = ~x,
y = ~y,
z = ~z)
data <- data.frame(x = seq(100, 1000, 100), y = seq(0, 0.9, by = 0.1),
z = seq(0, 0.9, by = 0.1))
plot_ly(data,x = ~x, y = ~y,z = ~z, type = "surface")
volcano
plot_ly(x = volcano, type = "surface")
plot_ly(z = volcano, type = "surface")
plot_ly(z = data, type = "surface")
library(plotly)
library(plotly)
axx <- list(
nticks = 4,
range = c(-25,75)
)
axy <- list(
nticks = 4,
range = c(-25,75)
)
axz <- list(
nticks = 4,
range = c(0,50)
)
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'mesh3d')
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'mesh3d')
fig
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'surface')
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'surface')
axx <- list(
nticks = 4,
range = c(-25,75)
)
axy <- list(
nticks = 4,
range = c(-25,75)
)
axz <- list(
nticks = 4,
range = c(0,50)
)
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
fig <- plot_ly(x = ~x, y = ~y, z = ~z, type = 'surface')
fig <- fig %>% layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
fig
data <- data.frame(x = seq(100, 1000, 100), y = seq(0, 0.9, by = 0.1),
z = seq(0, 0.9, by = 0.1))
x = seq(100, 1000, 100)
y = seq(0, 0.9, by = 0.1)
z = seq(0, 0.9, by = 0.1)
plot_ly(data,x = ~x, y = ~y,z = ~z, type = "mesh3d")
plot_ly(z = data, type = "mesh3d")
View(data)
x <- 70*(runif(70, 0, 1))
y <- 55*(runif(70, 0, 1))
z <- 40*(runif(70, 0, 1))
plot_ly(data,x = ~x, y = ~y,z = ~z, type = "mesh3d")
plot_ly(x = ~x, y = ~y,z = ~z, type = "mesh3d")
plot_ly(x = ~x, y = ~y,z = ~z, type = "surface")
plot_ly(x = ~x, y = ~y,z = ~z, type = "mesh3d")
x <- 70*seq(100, 1000, 100)
y <- 55*seq(100, 1000, 100)
z <- 40*seq(100, 1000, 100)
plot_ly(x = ~x, y = ~y,z = ~z, type = "mesh3d")
x <- 70*(runif(10, 0, 1))
y <- 55*(runif(10, 0, 1))
z <- 40*(runif(10, 0, 1))
plot_ly(x = ~x, y = ~y,z = ~z, type = "mesh3d")
x <- seq(100, 1000, 100)
y <- seq(100, 1000, 100)
z <- seq(100, 1000, 100)
plot_ly(data,x = ~x, y = ~y,z = ~z, type = "mesh3d")
x <- seq(100, 1000, 100)
y <- 2*seq(100, 1000, 100)
z <- 3*seq(100, 1000, 100)
plot_ly(data,x = ~x, y = ~y,z = ~z, type = "mesh3d")
z = volcano
View(z)
matrix <- matrix(runif(100), nrow=10, ncol=10)
plot_ly(z = matrix, type = "mesh3d")
plot_ly(z = ~matrix, type = "mesh3d")
plot_ly(z = ~matrix, type = "surface")
View(matrix)
plot_ly(z = volcano, type = "surface")
data <- data.frame(x = seq(100, 1000, 100), y = seq(0, 0.9, by = 0.1),
z = seq(0, 0.9, by = 0.1))
View(data)
View(matrix)
z <- matrix(runif(100), nrow=2, ncol=2)
x <- с(100, 200)
y <- c(0.5,0.6)
plot_ly(x = ~x, y = ~y,z = ~z, type = "mesh3d")
View(z)
plot_ly(z = ~matrix, type = "surface")
plot_ly(z = ~z, type = "surface")
z <- data.frame(runif(100), nrow=2, ncol=2)
plot_ly(z = ~z, type = "surface")
View(z)
data <- data.frame(x = seq(100, 1000, 100), y = seq(0, 0.9, by = 0.1)
)
plot_ly(z = data, type = "surface")
View(data)
colnames(data)=c(1,2)
plot_ly(z = data, type = "surface")
View(data)
data <- data.frame(x = seq(100, 1000, 100), y = seq(100, 1000, 100))
data <- data.frame(x = seq(100, 1000, 100), y = seq(100, 1000, 100))
data <- data.frame(x = seq(100, 1000, 100), y = seq(100, 1000, 100))
colnames(data)=c(1,2)
plot_ly(z = data, type = "surface")
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
z = rbind(
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0))
fig <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = 1.5, end = 2, size = 0.04, color = 'white'),
z = list(show = TRUE, start = 0.5, end = 0.8, size = 0.05)),
x = ~x,
y = ~y,
z = ~z)
x = c(1,2,3,4,5)
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
z = rbind(
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0))
library(plotly)
fig <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = 1.5, end = 2, size = 0.04, color = 'white'),
z = list(show = TRUE, start = 0.5, end = 0.8, size = 0.05)),
x = ~x,
y = ~y,
z = ~z)
View(z)
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
z = rbind(
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0),
c(1, 0, 1, 0, 1),
c(0, 1, 0, 1, 0))
library(plotly)
fig <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = 1.5, end = 2, size = 0.04, color = 'white'),
z = list(show = TRUE, start = 0.5, end = 0.8, size = 0.05)),
x = ~x,
y = ~y,
z = ~z)
fig1 = analysis_func()
fig1
analysis_func<- function() {
setwd("C:/Users/Tsinana/GitHub/6-th_semester/WpfCourseWork/WpfCourseWork/analysis")
library(plotly)
opar = par(no.readonly = TRUE)
#Подготовка к работе
a <- as.matrix(read.csv("a.csv", header = FALSE))[1,]
temp <- as.matrix(read.csv("temp.csv", header = FALSE))[1,]
cf <- as.matrix(read.csv("cf.csv", header = FALSE))[1,]
a <- head(a, -1)
temp <- head(temp, -1)
cf <- head(cf, -1)
cf <- matrix(cf, nrow = length(a), ncol = length(temp))
ЦФ = cf
axx <- list(
title = "Параментр принятия нового решения"
)
axy <- list(
title = "Начальная температура"
)
axz <- list(
title = "Знацение ЦФ"
)
fig <- plot_ly(
type = 'surface',
x = ~a,
y = ~temp,
z = ~ЦФ
)
fig <- fig %>% layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz))
return(fig)
}
fig1 = analysis_func()
analysis_func<- function() {
setwd("C:/Users/Tsinana/GitHub/6-th_semester/WpfCourseWork/WpfCourseWork/analysis")
library(plotly)
opar = par(no.readonly = TRUE)
#Подготовка к работе
a <- as.matrix(read.csv("a.csv", header = FALSE))[1,]
temp <- as.matrix(read.csv("temp.csv", header = FALSE))[1,]
cf <- as.matrix(read.csv("cf.csv", header = FALSE))[1,]
a <- head(a, -1)
temp <- head(temp, -1)
cf <- head(cf, -1)
cf <- matrix(cf, nrow = length(a), ncol = length(temp))
ЦФ = cf
axx <- list(
title = "Параментр принятия нового решения"
)
axy <- list(
title = "Начальная температура"
)
axz <- list(
title = "Знацение ЦФ"
)
fig <- plot_ly(
type = 'surface',
x = ~a,
y = ~temp,
z = ~ЦФ
)
fig <- fig %>% layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz))
return(fig)
}
fig1 = analysis_func()
setwd("C:/Users/Tsinana/GitHub/6-th_semester/WpfCourseWork/WpfCourseWork/analysis")
library(plotly)
opar = par(no.readonly = TRUE)
#Подготовка к работе
a <- as.matrix(read.csv("a.csv", header = FALSE))[1,]
temp <- as.matrix(read.csv("temp.csv", header = FALSE))[1,]
cf <- as.matrix(read.csv("cf.csv", header = FALSE))[1,]
cf <- as.matrix(read.csv("cf.csv", header = FALSE))[1,]
