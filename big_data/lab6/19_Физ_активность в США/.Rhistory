f
a = m a tri x (1:8 , nrow = 4 , ncol = 2)
b = c( " a " , " b " , " c " , " a " )
a = matrix(1:8 , nrow = 4 , ncol = 2)
b = c( " a " , " b " , " c " , " a " )
d = (1:4 %% 2 == 0)
e = factor ( c( " soft " , " hard " , " soft " , " m e d i u m " ) )
f = data.frame ( a , b , d , e )
f
q = [1, 0, 2, 3, 6, 8, 12, 15, 0, NA, NA, 9, 4, 16, 2, 0]
q = c(1, 0, 2, 3, 6, 8, 12, 15, 0, NA, NA, 9, 4, 16, 2, 0)
q[1]
q[len(q)]
q[length(q)]
q[3..5]
q[c(3,4,5)]
q[3:5]
q>4
q[q>4]
q[q=2]
q[q=2]
q[q==2]
q[q/3==0]
q[q%3==0]
q[q%%3==0]
q[q>4 and q%%3==0]
q[q>4 && q%%3==0]
q[q>4 & q%%3==0]
which(q == 0)
which(q>1 & q<9)
sq
sq()
sq = function()
{
q = c(1, 0, 2, 3, 6, 8, 12, 15, 0, NA, NA, 9, 4, 16, 2, 0)
q[1]
q[length(q)]
q[3:5]
q[q==2]
q[q>4]
q[q%%3==0]
q[q>4 & q%%3==0]
q[q<1 | q>5]
which(q == 0)
which(q>1 & q<9)
}
sq()
q = c(1, 0, 2, 3, 6, 8, 12, 15, 0, NA, NA, 9, 4, 16, 2, 0)
q[1]
q[length(q)]
q[3:5]
q[q==2]
q[q>4]
q[q%%3==0]
q[q>4 & q%%3==0]
q[q<1 | q>5]
which(q == 0)
which(q>1 & q<9)
rank = c(1,2,3,4,5,6,7,8,28)
country = c("Гремания","Австралия","Новая Зеландия","Дания","Норвегия","Исландия","США","Канада","Япония")
education_index = c(0.946,
0.923,
0.923,
0.92,
0.919,
0.918,
0.899,
0.891,
0.85
)
expenses = c(4.6,
5.1,
7.2,
8.7,
7.3,
7.8,
5.4,
4.8,
3.8
)
dr = data.frame(rank, country, education_index,expenses)
View(dr)
continent = c("Европа","Америка","Азия")
df = data.frame(dr,continent)
View(dr)
View(df)
dr = data.frame(dr,continent)
View(dr)
df[nrow(dr)+1,] = c(,,00,00,)
sum(dr$education_index)
sum_of_e = sum(dr$expenses)
df[nrow(dr)+1,] = c(NA,NA,sum_of_ei,sum_of_e,NA)
df[nrow(dr)+1,] <- c(NA,NA,sum_of_ei,sum_of_e,NA)
sum_of_ei = sum(dr$education_index)
df[nrow(dr)+1,] <- c(NA,NA,sum_of_ei,sum_of_e,NA)
dr[nrow(dr)+1,] <- c(NA,NA,sum_of_ei,sum_of_e,NA)
order(df$expenses,decreasing = TRUE)
View(dr)
View(df)
dd = order(df$expenses,decreasing = TRUE)
data[order(df$expenses,decreasing = TRUE)]
data[order(df$expenses,decreasing = TRUE),]
print(data[order(df$expenses,decreasing = TRUE),])
print(df[order(df$expenses,decreasing = TRUE),])
dd = (df[order(df$expenses,decreasing = TRUE),])
View(dd)
dd = (df[order(df$expenses,df$rank,decreasing = TRUE),])
View(dd)
dr = dd(dd$continent == "Азия")
dr = dd[dd$continent == "Азия"]
dr = dd[dd$continent == "Азия"]
dd$continent == "Азия"
dr = (dd[dd$continent == "Азия",])
View(dr)
dr = (dd[dd$continent == "Азия"])
q = c(1, 0, 2, 3, 6, 8, 12, 15, 0, NA, NA, 9, 4, 16, 2, 0)
q[1]
q[length(q)]
q[3:5]
q[q==2]
q[q>4]
q[q%%3==0]
q[q>4 & q%%3==0]
q[q<1 | q>5]
which(q == 0)
which(q>1 & q<9)
x = c(123,134,145,167,39)
m = c('M','M','W','M','CAT')
is.character(x)
is.character(m)
is.factor(x)
is.factor(m)
is.character(x.f)
x.f = factor(x)
m.f = factor(m)
is.character(x.f)
is.character(m.f)
is.factor(x.f)
is.factor(m.f)
m.f
plot(m.f)
plot(x.f)
plot(m.f)
w = c(69,68,93,76,10,45,76,23,45)
plot(w,x)
w = c(69,68,93,76,10)
plot(w,x,pch = as.numeric((m.f)),col = as.numeric(m.f))
numeric((m.f))
numeric((m.f))
legend("topleft",pch=1:2,col = 1:2,legend =leveld(m.f))
legend("topleft",pch=1:2,col = 1:2,legend =levels(m.f))
legend("topleft",pch=1:3,col = 1:2,legend =levels(m.f))
legend("topleft",pch=1:3,col = 1:3,legend =levels(m.f))
t = c('XXS','XXS','XS','S','XXXXXS')
t.f = factor(t)
t.o=ordered(t.f,levels = c('XXXXXS','XXS','XS','S'))
t.o=ordered(t.f,levels = c('XXXXXS','XXS','XS','S'))
h = c(8,10,NA,NA,1)
mean(h,na.rm = TRUE)
h = c(8,10,NA,NA,2)
mean(h,na.rm = TRUE)
mean(na.omit(h))
mean(h,na.rm = TRUE)
h = c(8,20,NA,NA,2)
mean(h,na.rm = TRUE)
mean(na.omit(h))
a = c(1,1,1,2,2,3,2,1,5,1)
mean(a)
h[is.ha(h)]= mean(na.omit(h))
h[is.ha(h)] <- mean(na.omit(h))
h[is.na(h)] <- mean(na.omit(h))
names = ('Олег','Олег','Олег','Олег','Кошка')
names = с('Олег','Олег','Олег','Олег','Кошка')
names = С('Олег','Олег','Олег','Олег','Кошка')
nam = С('Олег','Олег','Олег','Олег','Кошка')
nam = с('Олег','Олег','Олег','Олег','Кошка')
nam = с('Олег','Олег','Жея','Олег','Кошка')
nam = с('Олег','Олег','Жея','Олег','Кошка')
names = с('Олег','Олег','Жея','Олег','Кошка')
names = c('Олег','Олег','Жея','Олег','Кошка')
df = data.frame(weight = w,height = x, size = t.o,sex = m.f)
View(df)
df[,1]
df[[1]]
df[,"weight"]
df[df$sex=='W',]
df[order(df$sex,df$height)]
df[order(df$sex,df$height),]
windowsFonts(
A=windowsFont(“Arial Black”),
windowsFonts(
A=windowsFont(“Arial Black”),
windowsFonts(
A=windowsFont(“Arial Black”),
windowsFonts(
A=windowsFonts(“Arial Black”),
windowsFonts(A=windowsFonts(“Arial Black”),B=windowsFonts(“Bookman Old Style”),C=windowsFonts(“Comic Sans MS”))
windowsFonts(A=windowsFonts(“Arial Black”),B=windowsFonts(“Bookman Old Style”),C=windowsFonts(“Comic Sans MS”))
windows()
Sys.setlocale("LC_ALL","ja")
windowsFonts(A=windowsFonts(“Arial Black”),B=windowsFonts(“Bookman Old Style”),C=windowsFonts(“Comic Sans MS”))
windowsFonts(A=windowsFonts(“Arial Black”),B=windowsFonts(“Bookman Old Style”),C=windowsFonts(“Comic Sans MS”))
windowsFonts(A=windowsFonts(“Arial Black”))
windowsFonts(A=windowsFonts("Arial"))
windowsFonts(A=windowsFonts('Arial Black'),B=windowsFonts('Bookman Old Style'),C=windowsFonts('Comic Sans MS'))
windowsFonts(A=windowsFonts('Arial Black'))
windowsFonts(A=windowsFonts('Times New Roman'))
windowsFonts(A=windowsFont('Times New Roman'))
mygrays <- gray(0:n/n)
num<-c(1:10)
square<-num*num
plot(num,square,type="b")
help(plot)
,
plot(num,square,type="b")
plot(num,squaresfjigkls;f;sd,type="b")
num<-c(1:10)
square<-num*num
plot(num,square,type="b")
help(plot)
par(no.readonly = T)
opar <- par(no.readonly=TRUE) # создает копию текущих параметров
par(lty=2, pch=17)            # назначает тип линии – пунктирная (lty=2) вместо
#сплошной по умолчанию и тип символа – заполненный треугольник (pch=17)
plot(num,square,type="b")
par(opar) 			 #восстановление исходных значений параметров
n <- 10
mycolors <- rainbow(n)
pie(rep(1, n), labels=mycolors, col=mycolors) # Круговая диаграмма
mygrays <- gray(0:n/n)
pie(rep(1, n), labels=mygrays, col=mygrays)
windows()
Sys.setlocale("LC_ALL","ja")
windowsFonts(A=windowsFont('Arial Black'),B=windowsFont('Bookman Old Style'),C=windowsFont('Comic Sans MS'))
opar <- par(no.readonly=TRUE)
par(pin=c(2, 3))
par(lwd=2, cex=1.5)
par(cex.axis=.75, font.axis=3)
plot(num, square, type="b", pch=19, lty=2, col="red")
plot(num, square, type="b", pch=23, lty=6, col="blue", bg="green")
par(opar)
opar <- par(no.readonly=TRUE)
par(pin=c(2, 3))
par(lwd=2, cex=1.5)
par(cex.axis=.75, font.axis=3)
plot(num, square, type="b", pch=19, lty=2, col="red")
plot(num, square, type="b", pch=23, lty=6, col="blue", bg="green")
par(opar)
plot(num, square, type="b",
+      col="green", lty=2, pch=2, lwd=2,
plot(num, square, type="b",
col="green", lty=2, pch=2, lwd=2,
main="Квадратичная зависимость",
sub="Просто квадрат числа",
xlab="Month", ylab="Квадрат числа",
xlim=c(0, 12), ylim=c(0, 300))
Sys.setlocale("LC_ALL","ru")
plot(num, square, type="b",
col="green", lty=2, pch=2, lwd=2,
main="Квадратичная зависимость",
sub="Просто квадрат числа",
xlab="Month", ylab="Квадрат числа",
xlim=c(0, 12), ylim=c(0, 300))
Sys.setlocale("LC_ALL","Endlish")
Sys.setlocale("LC_ALL","English")
Sys.setlocale("LC_ALL","En")
plot(num, square, type="b",
col="green", lty=2, pch=2, lwd=2,
main="Квадратичная зависимость",
sub="Просто квадрат числа",
xlab="Month", ylab="Квадрат числа",
xlim=c(0, 12), ylim=c(0, 300))
> plot(num, square, type="b",  ann=FALSE,
plot(num, square, type="b",  ann=FALSE,
col="green", lty=2, pch=2, lwd=2,
xlim=c(0, 12), ylim=c(0, 300))
title(main="Квадратичная зависимость", col.main="red",
sub="Просто квадрат числа", col.sub="blue",
xlab="Month", ylab="Квадрат числа",
col.lab="green", cex.lab=1)
#Выгрузка данных
setwd("C:/Users/Tsinana/GitHub/6-th_semester/big_data/lab6/19_Физ_активность в США")
opar = par(no.readonly = TRUE)
#Подготовка к работе
location_id<-read.csv("BRFSS location_id KEY.csv", sep=",", header=T, fileEncoding="cp1251")
activity_columns<-read.csv("BRFSS Physical Activity columns KEY.csv", sep=",", header=T, fileEncoding="cp1251")
acticity<-read.csv("BRFSS Physical Acticity.csv", sep=",", header=T, fileEncoding="cp1251")
years = c(2021,2020,2019,2018,2017,2016,2015)
col_key = c('Участвовал в 150 или более минутах\nаэробной физической активности в неделю',
'Участвовал в достаточном количестве\nаэробных упражнений и упражнений для укрепления мышц,\nчтобы соответствовать рекомендациям',
'Участвовал в упражнениях по укреплению мышц\nдва или более раз в неделю',
'Участвовал в физической активности\nв течение последнего месяца')
acticity_unfull <- data.frame(acticity[is.na(acticity[4]),])
acticity_full <- data.frame(acticity[!is.na(acticity[4]),])
#ящики для каждого года
par(mfrow=c(2,2))
col_with_value = grep("yes_value", names(acticity))
for (col_int in col_with_value) {
current_df = acticity[, c(3, col_int)]
boxplot(current_df[,2] ~ current_df[,1],
main = col_key[col_int/4],
xlab = "Год",
ylab = "Значение %",
col = "orange",
border = "brown")
}
#гисты для каждого города
for (col_int in col_with_value) {
current_df = acticity[, c(2, col_int)]
plot(current_df[,2] ~ current_df[,1],
main = col_key[col_int/4],
xlab = "Город",
ylab = "Значение %",
col = "brown",
type="h")
}
par(opar)
#min max для городов
for (col_int in col_with_value) {
current_df = acticity[, c(2, col_int)]
current_df = na.omit(current_df)
cat(sprintf("\n\n%s\nfun, Город, Значение (Процент)", col_key[col_int/4]))
digit = max(current_df[,2], na.rm = TRUE)
sity =  array(current_df[current_df[,2] == digit,])
cat(sprintf("\nmax, %s, %0.1f", location_id[location_id[1] == sity[1]][2], sity[2]))
digit = min(current_df[,2], na.rm = TRUE)
sity =  array(current_df[current_df[,2] == digit,])
cat(sprintf("\nmin, %s, %0.1f", location_id[location_id[1] == sity[1]][2], sity[2]))
}
#Стандартизация переменных нет необходимости, тк кк значения представляют собой процент
#Смотрим на разницу результатов в зависимости от df
acticity_only_value = acticity[,col_with_value]
acticity_nain0 = replace(acticity_only_value, is.na(acticity_only_value), 0)
dist.df_na.in0 = dist(acticity_nain0)
dist.df_all = dist(acticity_full[,col_with_value])
dist.df_unfall= dist(acticity_unfull[,16])
clust.df_all = hclust(dist.df_all,"ward.D")
plot(clust.df_all)
clust.df_na.in0 = hclust(dist.df_na.in0,"ward.D")
plot(clust.df_na.in0)
clust.df_unfall = hclust(dist.df_unfall,"ward.D")
plot(clust.df_unfall)
#Смотрим на различае в группах
test = acticity_full[,col_with_value]
groups <- cutree(clust.df_all, k=3)
g1<-colMeans(test[groups==1, 1:4])
g2<-colMeans(test[groups==2, 1:4])
g3<-colMeans(test[groups==3, 1:4])
df<-data.frame(g1,g2,g3)
df1<-t(df)
df<-t(df1)
barplot(df,
main = "Groups of act",
col=c("red","green","blue","yellow"),
beside=TRUE)
legend("top", legend = rownames(df), col=c("red","green","blue","yellow"), lwd=4, bty = "n")
#Смотрим на каменную осыпь
length(clust.df_all$height)
plot(1:163, clust.df_all$height, type='b')
#Класторизация
library (lattice)
test = acticity_full[,c(3,col_with_value)]
head(test)
xyplot(PAINDX2_yes_value ~ TOTINDA_yes_value, groups = year, data = test, auto.key = TRUE)
#Класторизация в связи
xyplot(PAINDX2_yes_value ~ PASTAE2_yes_value + PASTRNG_yes_value + TOTINDA_yes_value |year,data=test, grid = T, auto.key=TRUE)
#Класторизация в связи 3D
cloud(PAINDX2_yes_value ~ TOTINDA_yes_value+ PASTRNG_yes_value, group = year, data = test, auto.key = TRUE)
#модный ggplot
packages <- c('ggplot2', 'dplyr', 'tidyr', 'tibble')
#install.packages(packages)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
test %>%
ggplot(aes(PAINDX2_yes_value, TOTINDA_yes_value, color = year))+geom_point()
a = data.frame(head(acticity))
,
barplot(df,
main = "Groups of act",
col=c("red","green","blue","yellow"),
beside=TRUE)
library(klaR)
install.packages(klaR)
install.packages('klaR')
library(klaR)
install.packages('klaR')
install.packages("klaR")
library(klaR)
naive_iris <- NaiveBayes(iris$Species ~ ., data = iris)
naive_iris$tables
naive_iris$tables$Petal.Width
opar=par()
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
plot(naive_iris,lwd = 2, legendplot=TRUE)
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
plot(naive_iris,lwd = 2, legendplot=TRUE)
plot(naive_iris,lwd = 2,)
plot(naive_iris,lwd = 2,)
legend("topleft", legend=c("setosa", "versicolor", "virginica"),lty=1:3, cex=0.5)
opar=par()
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
plot(naive_iris,lwd = 2)
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
plot(naive_iris,lwd = 2)
opar=par()
layout(matrix(c(1,2,3,4), 2, 2, byrow = TRUE))
plot(naive_iris,lwd = 2)
naive_iris
par=opar
pred <- predict(naive_iris, iris[, -5])$class(table(Факт = iris$Species, Прогноз = pred))
pred <- predict(naive_iris, iris[, -5])$class
(table(Факт = iris$Species, Прогноз = pred))
pred
Acc <- mean(pred == iris$Species)
Acc
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
ind
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
nrow(trainData)             # [1]       112
nrow(testData)              # [1]        38
nrow(iris)                  # [1]        150
install.packages("party")
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
> table(predict(iris_ctree), trainData$Species)
table(predict(iris_ctree), trainData$Species)
iris_ctree
plot(iris_ctree)
test_predicted <- predict(iris_ctree, newdata=testData)
table(test_predicted, testData$Species)
library(randomForest)
install.packages("randomForest")
library(randomForest)
rf <- randomForest(Species ~ .,data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Species)
rf
